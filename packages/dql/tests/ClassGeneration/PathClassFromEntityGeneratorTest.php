<?php

declare(strict_types=1);

namespace Tests\ClassGeneration;

use EDT\DqlQuerying\ClassGeneration\PathClassFromEntityGenerator;
use PHPUnit\Framework\TestCase;

class PathClassFromEntityGeneratorTest extends TestCase
{
    private const ENTITY_A_PATH = '<?php

declare(strict_types=1);

namespace Foobar;

/**
 * WARNING: THIS CLASS IS AUTOGENERATED.
 * MANUAL CHANGES WILL BE LOST ON RE-GENERATION.
 *
 * To add additional properties, you may want to
 * create an extending class and add them there.
 *
 * @property-read EDT\PathBuilding\End $propertyA
 * @property-read Tests\ClassGeneration\EntityBPath $propertyB
 * @property-read Tests\ClassGeneration\EntityBPath $propertyC
 * @property-read Tests\ClassGeneration\EntityBPath $propertyD
 * @property-read Tests\ClassGeneration\EntityBPath $propertyE
 * @property-read EDT\PathBuilding\End $propertyF
 * @property-read Tests\ClassGeneration\EntityBPath $propertyG
 * @property-read Tests\ClassGeneration\EntityBPath $propertyH
 * @property-read Tests\ClassGeneration\EntityBPath $propertyI
 * @property-read Tests\ClassGeneration\EntityBPath $propertyJ
 */
class EntityAPath implements \EDT\PathBuilding\PropertyAutoPathInterface
{
	use \EDT\PathBuilding\PropertyAutoPathTrait;
}
';

    private const PATHS = '<?php

declare(strict_types=1);

namespace Bar;

/**
 * WARNING: THIS CLASS IS AUTOGENERATED.
 * MANUAL CHANGES WILL BE LOST ON RE-GENERATION.
 */
class Paths
{
	public static function entityA(): \Foobar\EntityA
	{
		return \Foobar\EntityA::startPath();
	}


	public static function entityB(): \Foobar\EntityB
	{
		return \Foobar\EntityB::startPath();
	}
}
';

    public function testGenerateFromEntity()
    {
        $generator = new PathClassFromEntityGenerator();
        $entityAReflectionClass = new \ReflectionClass(EntityA::class);
        $file = $generator->generatePathClass($entityAReflectionClass, 'EntityAPath', 'Foobar');
        self::assertSame(self::ENTITY_A_PATH, (string) $file);
    }

    public function testGenerateFromEntities(): void
    {
        $generator = new PathClassFromEntityGenerator();

        $file = $generator->generateEntryPointClass(
            [['\Foobar', 'EntityA'], ['\Foobar', 'EntityB']],
            'Paths',
            'Bar'
        );
        self::assertSame(self::PATHS, (string) $file);
    }
}
