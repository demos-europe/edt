<?php

declare(strict_types=1);

namespace Tests\ClassGeneration;

use EDT\DqlQuerying\ClassGeneration\PathClassFromEntityGenerator;
use EDT\Parsing\Utilities\Types\ClassOrInterfaceType;
use EDT\Parsing\Utilities\Types\NonClassOrInterfaceType;
use PHPUnit\Framework\TestCase;
use ReflectionClass;

class PathClassFromEntityGeneratorTest extends TestCase
{
    private const ENTITY_A_PATH = '<?php

declare(strict_types=1);

namespace Foobar;

use EDT\PathBuilding\End;
use EDT\PathBuilding\PropertyAutoPathInterface;
use EDT\PathBuilding\PropertyAutoPathTrait;
use Tests\ClassGeneration\EntityA;

/**
 * WARNING: THIS CLASS IS AUTOGENERATED.
 * MANUAL CHANGES WILL BE LOST ON RE-GENERATION.
 *
 * To add additional properties, you may want to
 * create an extending class and add them there.
 *
 * @property-read End $id {@link EntityA::id}
 * @property-read End $propertyA {@link EntityA::propertyA}
 * @property-read EntityBPath $propertyB {@link EntityA::propertyB}
 * @property-read EntityBPath $propertyC {@link EntityA::propertyC}
 * @property-read EntityBPath $propertyD {@link EntityA::propertyD}
 * @property-read EntityBPath $propertyE {@link EntityA::propertyE}
 * @property-read End $propertyF {@link EntityA::propertyF}
 * @property-read EntityBPath $propertyG {@link EntityA::propertyG}
 * @property-read EntityBPath $propertyH {@link EntityA::propertyH}
 * @property-read EntityBPath $propertyI {@link EntityA::propertyI}
 * @property-read EntityBPath $propertyJ {@link EntityA::propertyJ}
 */
class EntityAPath implements PropertyAutoPathInterface
{
	use PropertyAutoPathTrait;
}
';

    private const ENTITY_C_PATH = '<?php

declare(strict_types=1);

namespace Foobar;

use EDT\PathBuilding\End;
use EDT\PathBuilding\PropertyAutoPathInterface;
use EDT\PathBuilding\PropertyAutoPathTrait;
use Tests\ClassGeneration\EntityC;

/**
 * WARNING: THIS CLASS IS AUTOGENERATED.
 * MANUAL CHANGES WILL BE LOST ON RE-GENERATION.
 *
 * To add additional properties, you may want to
 * create an extending class and add them there.
 *
 * @property-read End $id {@link EntityC::id}
 * @property-read End $propertyA {@link EntityC::propertyA}
 * @property-read EntityBPath $propertyB {@link EntityC::propertyB}
 * @property-read EntityBPath $propertyC {@link EntityC::propertyC}
 * @property-read EntityBPath $propertyD {@link EntityC::propertyD}
 * @property-read EntityBPath $propertyE {@link EntityC::propertyE}
 * @property-read End $propertyF {@link EntityC::propertyF}
 * @property-read EntityBPath $propertyG {@link EntityC::propertyG}
 * @property-read EntityBPath $propertyH {@link EntityC::propertyH}
 * @property-read EntityBPath $propertyI {@link EntityC::propertyI}
 * @property-read EntityBPath $propertyJ {@link EntityC::propertyJ}
 */
class EntityCPath implements PropertyAutoPathInterface
{
	use PropertyAutoPathTrait;
}
';

    private const PATHS = '<?php

declare(strict_types=1);

namespace Bar;

use Tests\ClassGeneration\EntityAPath;
use Tests\ClassGeneration\EntityBPath;

/**
 * WARNING: THIS CLASS IS AUTOGENERATED.
 * MANUAL CHANGES WILL BE LOST ON RE-GENERATION.
 */
class Paths
{
	public static function entityAPath(): EntityAPath
	{
		return EntityAPath::startPath();
	}


	/**
	 * @return EntityBPath<string>
	 */
	public static function entityBPath(): EntityBPath
	{
		return EntityBPath::startPath();
	}
}
';

    public function testGenerateFromEntity()
    {
        $generator = new PathClassFromEntityGenerator();
        $entityAReflectionClass = new ReflectionClass(EntityA::class);
        $file = $generator->generatePathClass($entityAReflectionClass, 'EntityAPath', 'Foobar', true);
        self::assertSame(self::ENTITY_A_PATH, (string) $file);
    }

    public function testGenerateFromEntityWithRedundantAnnotation(): void
    {
        $generator = new PathClassFromEntityGenerator();
        $entityAReflectionClass = new ReflectionClass(EntityC::class);
        $file = $generator->generatePathClass($entityAReflectionClass, 'EntityCPath', 'Foobar', true);
        self::assertSame(self::ENTITY_C_PATH, (string) $file);
    }

    public function testGenerateFromEntities(): void
    {
        $generator = new PathClassFromEntityGenerator();

        $file = $generator->generateEntryPointClass(
            [
                ClassOrInterfaceType::fromFqcn(EntityAPath::class),
                ClassOrInterfaceType::fromFqcn(EntityBPath::class, [
                    NonClassOrInterfaceType::fromRawString('string'),
                ])
            ],
            'Paths',
            'Bar',
            static fn (ClassOrInterfaceType $pathClass): string => lcfirst($pathClass->getShortClassName())
        );
        self::assertSame(self::PATHS, (string) $file);
    }
}
