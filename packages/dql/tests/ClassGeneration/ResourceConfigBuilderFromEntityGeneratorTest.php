<?php

declare(strict_types=1);

namespace Tests\ClassGeneration;

use EDT\DqlQuerying\ClassGeneration\ResourceConfigBuilderFromEntityGenerator;
use EDT\DqlQuerying\Contracts\ClauseFunctionInterface;
use EDT\DqlQuerying\Contracts\OrderBySortMethodInterface;
use PHPUnit\Framework\TestCase;

class ResourceConfigBuilderFromEntityGeneratorTest extends TestCase
{
    private const ENTITY_A_CONFIG = '<?php

declare(strict_types=1);

namespace Foobar;

use EDT\JsonApi\ResourceConfig\Builder\MagicResourceConfigBuilder;

/**
 * WARNING: THIS CLASS IS AUTOGENERATED.
 * MANUAL CHANGES WILL BE LOST ON RE-GENERATION.
 *
 * To add additional properties, you may want to
 * create an extending class and add them there.
 *
 * @template-implements EDT\JsonApi\ResourceConfig\Builder\MagicResourceConfigBuilder<EDT\DqlQuerying\Contracts\ClauseFunctionInterface, EDT\DqlQuerying\Contracts\OrderBySortMethodInterface, Tests\ClassGeneration\EntityA>
 *
 * @property-read EDT\JsonApi\PropertyConfig\Builder\AttributeConfigBuilderInterface<EDT\DqlQuerying\Contracts\ClauseFunctionInterface, Tests\ClassGeneration\EntityA> $propertyA
 * @property-read EDT\JsonApi\PropertyConfig\Builder\ToManyRelationshipConfigBuilderInterface<EDT\DqlQuerying\Contracts\ClauseFunctionInterface, EDT\DqlQuerying\Contracts\OrderBySortMethodInterface, Tests\ClassGeneration\EntityA, Tests\ClassGeneration\EntityB> $propertyB
 * @property-read EDT\JsonApi\PropertyConfig\Builder\ToManyRelationshipConfigBuilderInterface<EDT\DqlQuerying\Contracts\ClauseFunctionInterface, EDT\DqlQuerying\Contracts\OrderBySortMethodInterface, Tests\ClassGeneration\EntityA, Tests\ClassGeneration\EntityB> $propertyC
 * @property-read EDT\JsonApi\PropertyConfig\Builder\ToOneRelationshipConfigBuilderInterface<EDT\DqlQuerying\Contracts\ClauseFunctionInterface, EDT\DqlQuerying\Contracts\OrderBySortMethodInterface, Tests\ClassGeneration\EntityA, Tests\ClassGeneration\EntityB> $propertyD
 * @property-read EDT\JsonApi\PropertyConfig\Builder\ToOneRelationshipConfigBuilderInterface<EDT\DqlQuerying\Contracts\ClauseFunctionInterface, EDT\DqlQuerying\Contracts\OrderBySortMethodInterface, Tests\ClassGeneration\EntityA, Tests\ClassGeneration\EntityB> $propertyE
 * @property-read EDT\JsonApi\PropertyConfig\Builder\AttributeConfigBuilderInterface<EDT\DqlQuerying\Contracts\ClauseFunctionInterface, Tests\ClassGeneration\EntityA> $propertyF
 * @property-read EDT\JsonApi\PropertyConfig\Builder\ToManyRelationshipConfigBuilderInterface<EDT\DqlQuerying\Contracts\ClauseFunctionInterface, EDT\DqlQuerying\Contracts\OrderBySortMethodInterface, Tests\ClassGeneration\EntityA, Tests\ClassGeneration\EntityB> $propertyG
 * @property-read EDT\JsonApi\PropertyConfig\Builder\ToManyRelationshipConfigBuilderInterface<EDT\DqlQuerying\Contracts\ClauseFunctionInterface, EDT\DqlQuerying\Contracts\OrderBySortMethodInterface, Tests\ClassGeneration\EntityA, Tests\ClassGeneration\EntityB> $propertyH
 * @property-read EDT\JsonApi\PropertyConfig\Builder\ToOneRelationshipConfigBuilderInterface<EDT\DqlQuerying\Contracts\ClauseFunctionInterface, EDT\DqlQuerying\Contracts\OrderBySortMethodInterface, Tests\ClassGeneration\EntityA, Tests\ClassGeneration\EntityB> $propertyI
 * @property-read EDT\JsonApi\PropertyConfig\Builder\ToOneRelationshipConfigBuilderInterface<EDT\DqlQuerying\Contracts\ClauseFunctionInterface, EDT\DqlQuerying\Contracts\OrderBySortMethodInterface, Tests\ClassGeneration\EntityA, Tests\ClassGeneration\EntityB> $propertyJ
 */
class EntityAConfig implements MagicResourceConfigBuilder
{
}
';

    public function testGenerateConfigBuilderClass(): void
    {
        $generator = new ResourceConfigBuilderFromEntityGenerator(
            ClauseFunctionInterface::class,
            OrderBySortMethodInterface::class
        );

        $file = $generator->generateConfigBuilderClass(
            new \ReflectionClass(EntityA::class),
            'EntityAConfig',
            'Foobar'
        );

        self::assertSame(self::ENTITY_A_CONFIG, (string)$file);
    }
}
