<?php

declare(strict_types=1);

namespace EDT\DqlQuerying\ClassGeneration;

use EDT\Parsing\Utilities\Types\ClassOrInterfaceType;
use Nette\PhpGenerator\PhpFile;

class TypeHolderGenerator
{
    /**
     * Generate a config builder class from the given base class.
     *
     * @param list<ClassOrInterfaceType> $injectionClasses
     * @param non-empty-string $targetName
     * @param non-empty-string $targetNamespace
     */
    public function generateTypeHolder(
        array $injectionClasses,
        string $targetName,
        string $targetNamespace
    ): PhpFile {
        $newFile = new PhpFile();
        $newFile->setStrictTypes();

        $namespace = $newFile->addNamespace($targetNamespace);
        $class = $namespace->addClass($targetName);

        $class->addComment('WARNING: THIS CLASS IS AUTOGENERATED.');
        $class->addComment("MANUAL CHANGES WILL BE LOST ON RE-GENERATION.\n");

        // set up constructor
        $constructor = $class->addMethod('__construct');
        $constructor->setPublic();

        foreach ($injectionClasses as $injectionClass) {
            // add use declarations
            array_map([$namespace, 'addUse'], $injectionClass->getAllFullyQualifiedNames());

            $fullyQualifiedName = $injectionClass->getFullyQualifiedName();
            $shortClassName = $injectionClass->getShortClassName();
            $propertyType = $injectionClass->getFullString(true);
            $propertyName = lcfirst($shortClassName);

            // fill constructor
            // property promotion is not yet supported (not even with workarounds)
            $parameter = $constructor->addParameter($propertyName);
            $parameter->setType($fullyQualifiedName);
            $constructor->addComment("@param $propertyType \$$propertyName");
            $constructor->addBody("\$this->$propertyName = \$$propertyName;");

            // add property
            $property = $class->addProperty($propertyName);
            $property->addComment("@var $propertyType");
            $property->setProtected();
            $property->setType($fullyQualifiedName);

            // add getter method
            $method = $class->addMethod("get$shortClassName");
            $method->addComment("@return $propertyType");
            $method->setPublic();
            $method->setReturnType($fullyQualifiedName);
            $method->addBody("return \$this->$propertyName;");
        }

        return $newFile;
    }

}
